7/2/2025

Today, I got the dialogue completely debugged and added voices and everything. 

I won't need to revisit dialogue until it comes time to perfect all of the encoded features.
That will probably happen once I near the end of cutscenes.

From this point, it would probably be best to head right into cutscenes. That way, I can
finish the gamestart flow, and get the tasks finalized (cutscenes will force me to finish
adding all NPCs into the demo)

7/6/2025

CUTSCENES:

	-fix dialogue encoding system via note on scr_dialogue
	-test new dialogue encoding system
	-create and call new step event function for cutscene object
	-write create and step event functions for cutscene object
	-step event should check if the current step is complete (dialogue, movement, etc), then start the next one
	-each step will be a row on an excel spreadsheet. Each row will contain: speaker (index on character list), step content (always in form of dialogue, even if it's just one encoded step), 
	
7/7/2025

	-continue chipping away at the above list. Start by making a final decision about how to write action IDs (use macros that bind to strings e.g. INPUT_PLAYER_NAME = "INPUT PLAYER NAME" or use enumerated IDs)

7/8/2025

	-start filling out the switch statement in the "perform action" function on scr_dialogue
	-determine the best way to indicate and process character paths and emotes (probably best to keep the grid)
	-finish the case statements one-by-one, testing each one completely before moving on
	-once you hit the cutscene related actions, start building/testing the first cutscene
	
7/11/2025

	-labeled all the arguments for each item in the new dialogue encoding key
	-need to go through mercurio's dialogue sheet and replace all old encoding symbols with new ones
	-after doing so, write out the logic for each of those types of dialogue actions, then test
	
7/12/2025

	-replaced all of mercurio's *SAD* etc calls with new *<`<>`<>>* ones
	-finished the DISPLAY EMOTIONS section of the swtich statement in the new action process function
	-realized that I'll need to follow the DISPLAY EMOTIONS method for all of these, since the text is processed in the create event, not while being displayed (need to indicate when to do it then wait)
	-continue writing the cases for the switch statement in the action process function
	-once you're finished with the action process function, replace all other action checks in the code with the new single asterisks check
	-once the action process function and dialogue build function are both complete, test each type of action and debug until finished
	
7/14/2025
	DID
	-finished a good handful of the dialogue actions
	-fixed the build text function to use the new dialogue_perform_action function
	-tested the BEGIN SPAR dialogue action--it works!
	
	NEXT
	-finish and test ADD PATHS dialogue action
			-change NPC states to mirror the OVERWORLD_SPRITE_STATES system. Maybe even totally combine the two and use character IDs ???
			-finish the dialogue_post_paths function (not sure what it's called) and add the call to the clean up phase of the talk bubble (if it's not already there)
			-basically, you want to put any player's on pathGrid into the "FOLLOW PATH" state, and then make their current path the one that's on pathGrid[# 2, i]
	-finish and test ADD EMOTES dialogue action
	-finish and test TRIGGER UNLOCK dialogue action
	-create first cutscene spreadsheet
	-create function to create cutscenes on room change
	
7/25/2025
	DID
	-got the new NPC placement function working (it is called on room entry)
	-copied the OW sprites placement system:
		-new overworld room loading
			-check all NPC location lists
			-if current locationID is on NPC's list, run NPC location check function
				-each NPC location check function is a list of heuristics ordered from most to least specific
				-if conditions are satisfied for the given room, load that NPC
				
	-added the updated spell artwork
	
	NEXT
	-copy path following system from OW sprites to NPCs
	-use the OVERWORLD SPRITES STATE MACHINE function for NPCs and OW sprites (do whatever you need to do to rework it this way)
	
	-create a list of "non visible target spells" and "non visible attacker spells"
	-fade out the attacker and target for non visible attacker and target spells respectively